// symbol ^ is keyboard ctrl

^e       -scroll the window down

^y        -scorll the window up

^f         -scorll down one page

^b        -scorll up one page

H          -move cursor to the top of the window

M         -  move cursor to the middle of the window

L          - move cursor to the bottom of the window

gg    -go to the top file

G  -go to the botton file



按照文本块来移动

e是一个单词的末尾

＋到下一行的第一个字符

－到上一行的第一个字符

移动命令

b是返回上个单词

w命令式使光标移动一个单词，符号标点也算是一个单词。

W是只将光标移动到到下一个单词。

到一行的结尾　＄

到一行的开头　０

其他操作

往缓冲区放置文本　　ｐ

保存编辑结果，并离开文件　ＺＺ

不保存编辑文件，并离开文件　：ｑ！

文本创建和操纵命令

在光标所在的位置插入文本　　ｉ

在一行的开头插入文本　　　　Ｉ

在光标所在的位置附加文本　　ａ

在一行的末尾附加文本　　　　Ａ

将一整行恢复到原来的的状态　Ｕ

重复上一个动作　　　　　　　。

撤销上一个动作　　　　　　　ｕ

在光标下一行打开新行　　　　ｏ

在光标上一行打开新行　　　　Ｏ

删除一行并替换文本　　　　　Ｓ

合并当前这一行和下一行　　　Ｊ

切换当前字符的大小写　　　　～





附加文本

a和i的用法基本一样，a是光标的后面插入文本，i是在光标前面插入文本



更改文本

c 需要替换的文字

cw 从光标到这单词的末尾

c$ 从光标到本行的末尾

c0 从光标到此行的开头

cc更改整行的内容



r命令 r把一个字符替换成另一个



s命令是指你想要更改几个字符，而不是一整个单词。大写的S命令可以更改一整行



更改大小写

~更改字母的大小写是一种特殊的替换。



删除文本

dw 删除单词

dd 删除一行



字符

x命令通常我们想删除一个或者2个字符。



删除文件发生问题

误删文本，想要补救：

u命令只会撤销最近的一个命令

也可以用p命令，回复最近的几次的删除动作，因为vi会将最近9次删除的动作保存在9个编号的删除缓存冲区。举个例子，如果你知道要恢复的缓冲区是第三个，则可以输入  //"3p 把第三个缓冲区放到光标所在的下一行上。





移动文本

vi中，采取“删除后再置放文本”的方法移动文本，就想剪切黏贴。每次移动一个文本块时，文本块会被先删除，在存储在特殊的缓冲区中，接着移动到另一个位置，并被放置命令（p)放在新的位置。



复制文本

y命令将一段文本复制下来在别的地方使用

使用2个命令 y(拖拽)与p(放置)



重复

。命令可以使用重复命令



结合u命令和ctrl-ｒ重做命令，可以在文件更改的历史记录中倒退或者前进



更多插入文本的方法

Ａ　在一行的结尾处附加文本　也可以组合＄ａ

Ｉ　在一行的开头处插入　　　也可以组合０ｉ

ｏ　在光标所在位置的下一行打开新行

Ｏ　在光标所在位置的上一行打开新行

ｓ　删除光标所在位置的字符在替换文字　也可以组合ｘ　或者　ｒ

Ｓ　删除一整行在后替换文本



Ａ（附加）与ｉ（插入）。Ａ命令比＄ａ省下一次按键，虽然一个不算什么，但熟悉编辑器后会想省略更多按键。

ｏ与Ｏ（打开）可以节省很多回车键动作。

ｓ和Ｓ（代换），可以让你删除一个字符或一整行





用Ｊ合并二行　，注意这不是ｊ，ｊ是ｈｊｋｌ移动的命令





滚动屏幕

ctrl f 往前滚动一整屏

ctrl b 往后滚动一整屏

ctrl d 往下滚动半屏

ctrl u 往上滚动半屏



在屏幕中移动

H 移动屏幕顶端的行

M 移动屏幕中央的行

L 移动屏幕顶端的行



nH 移动到屏幕顶端的往下的第N行





根据行移动

+ 移动到下一行的第一个字符    （这里 enter同样效果） 

- 移动到上一行的第一个字符		

^移动到当前行的第一个非空格处  相对来说^会移动到当前的第一个字符处，忽略任何空格与制表符。0则是把光标移动到当前行的第一个位置处。



根据文本块来移动

e 移到单词的结尾

E 移到单词的结尾（忽略标点符号）

（ 移到当前句子的开头

） 移到下一个句子的开头

{ 移到当前这一段的开头

} 移到下一段的开头





根据搜索模式的结果来移动

/ 在大文件中移动时，是最快速的方法之一。



当你输入斜线时，其会在屏幕底部出现。



重复搜索

n 往同一个方向重复搜索

N 往相反的方向重复搜索





在当前行中搜索

f 命令也可以在一行内搜索。

fx 命令会将光标移动到下个出现x字符的地方（其中x代表任何字符）。

Fx 将光标移动到本行中上一个出现x的地方。

; 重复上一个搜索命令，方向相同

， 重复上一个搜索命令，方向相反







G （转至）命令

44G 转到44行 没输入参数就跳到最后一行



ctrl -g 显示总行数







更多的命令组合

更改       删除     复制  从光标的位置到。。。。。。。

cH         dL       yH    屏幕顶端

cL         dL       yL    屏幕底端

c+         d+       y+    下一行

c{         d{       y{    上一段           

cG         dG       yG    文件结尾

c13G       d13G     y13G  第十三行





打开文件的选项

vi file



vi  +n file   在第N行打开文件

vi  + file   在最后行打开文件



vi +/pattern  file   在第一个出现pattern的地方打开文件

如果你的模式中包含空格，则需要单双引号括起整个模式

+/"make you"





将文本拖拽到缓冲区中

要将文本拖拽到命名，需要拖拽命令前加(")双引号以及缓冲区的名称（a-z).

例如： "dyy     将当前行拖拽到缓冲区d中                                                                 

	" ayy       将当前行拖拽到缓冲区a中

将拖拽的内容放置命名缓冲区，移动光标到新位置后，使用p可以讲文本取回

"dp     将缓冲区d的内容放置到新的光标后



当你知道如何不离开vi 也可以在文件间切换时，便可以使用命名缓冲区在文件间传送部分文本了。

你也可以讲缓冲区的的文本删除

 "a5dd     将删除保存在缓冲区a 中的5行







 对一处做标记

 在vi中可以在某处做一个看不见的书签，然后在别处编辑，完成后在回到书签的位置。



mx  将当前位置标记成 x(x可以是如何字符)

’x(单引号)将光标移动到标记x所在的第一个字符。

`x (反引号)将光标移动到以x标记的字符。







ex命令打开文件

它会列出文件总行数以及命令提示符：

例如：

$ ex test

"test" 151L　５１１５ｃ

你不会看见文件任何一行，除非下达显示命令和多行ｅｘ命令



假如你是提示符下输入１ｐ

：１ｐ　

ｙｏｕ　　ｃａｎ　　ｓｌｅｅｐ

：

事实上ｐ是可以省略的



fullname   abbreviation   meaning 

delete       d            删除行

move         m            移动行

copy         co　　　　　　复制行

			ｔ　　　　　　　复制行（与ｃｏ同义）





当你写入文件时，用:set number 或 set nu   这会显示行号，行号不会写入文件，打印时也不会打印出来

ctrl -g 显示当前行编号

：=   列出文件的总行数

：.= 列出当前的所在的行

: /pattern/=  列出pattern第一次出现的行号





行寻址符号

你也可以用符号表示行地址。 

点号（。）表示当前这一行  

$表示文件的最后一行  

% 表示文件中的每一行，与1，$ 组合的意义相同。



:.,$d 删除当前这行到文件结尾的文本

：20，。m$ 将20行到当前这行的文本移到文件结尾

：%d 删除文件所有行

:%t$ 将所有的行复制到结尾





除了绝对地址之外，你还可以指定相当于当前这一行的地址。+于-的操作类似于算数操作

:.,.+20d    删除当前行到当前行之后的20行文本

:226,$m.-2  将226行到最后行移动到当前行的前2行

事实上在使用+或者-并不需要输入点号（。）,因为当前行会被假定为开始的位置。

如果后面没有接着数值，+与- 分别等于+1 与-1.

数字0表示开头（相像中的第0行）



：-,+t0

   复制3行（光标上一行当前行下一行）并复制到文件的开头。



定义范围

：3,19d 删除3到19行

：150,221m23 将150到211行移动到23行之后

：23,25co100将23行到25行复制到100行之后





搜索模式

:/pattern/d  删除下一个包含pattern的行

:/pattern/+d 删除下一个包含pattern的行的下一行

：/pattern1/,/pattern2/d 从第一个包含pattern1到pattern2的行

:.,/pattern/m23 将当前行到第一个包含pattern的行之间的文本移到23行后



全局搜索

:g/pattern 寻找（移动）文件中最后一次出现pattern的地方

:g/pattern/p   寻找被显示文件中所有包含pttern的行

:g!/pattern/p   寻找不被显示文件中所有包含pttern的行

:60,124g/pattern/p  寻找并显示第60行到124行之间包含的pattern行



合并ex命令

想输入新的ex命令，并不是每次都需要输入冒号。

竖线（|）可以分割命令，。

：1,3d | s/thier/their  删除1到3行（现在位于文件的开头），接着做替换





:1,5 m 10 | g/pattern/nu 将1到5行的移动到第十行之后 ， 接着显示所有包含pattern的行的行号



保存与离开文件

vi 命令中  ZZ ，用于离开并写入保存文件。



ex命令离开文件



:q  离开编辑器

:w  将缓冲区的内容写入并保存

:wq	写入同时并离开

:x  写入同时并离开（只有修改过时才会写入）

如果你想强制执行命令在命令后加个感叹号，这样可以忽略警告

:w!



更改缓冲区的名称   // 满有用的

如果你要同时保存原来的文件和更改过的文件，你可以用:w 将整个缓冲区（你正在编辑的问文件副本）以新的文件名保存。

：w test.new



保存一部分文件

有时候会想将一部分编辑的文件保存为新的文件。



:23,$w  newfile  将23行到最后行的保存名为newfile文件



:.,600w newfile  将光标所在行到600行保存为newfile文件





附加内容到以保存的文件

可以用unix的重定向与附加运算符（>>)加上w命令，将缓冲区内容附加到现有的文件当中。



:1,10w newfile  

在输入

:340,$w >> newfile

则newfile会包含第1-10行以及340行到行尾缓冲区结尾的2段内容。



将一个文件复制到另一文件

：read filename

这个命令就会把filename的内容插入到光标所在的位置下一行。





假设你在编辑practice 文件并想读入一个位于其他目录下的文件，例如/home/tim的data文件，则先将光标移动到欲插入的位置的上一行，在输入：read /home/tim/data

:0x /home/tim/data  将读入的文件放在当前文件的开头

：/pattern/r /home/tim/data  将读入的文件放在第一个出现在pattern行之后









编辑多个文件

vim file1 file2

先编辑file1,然后使用ex命令：w写入file，此时：n 会调用下一个文件file2



调用新文件

你不需要在编辑回话刚开始时就调用多个文件，而可以在任何时候使用：e 命令切换另一文件。

如果你要在vI中编辑另外一个文件，首先就是要保存当前文件:w在下命令

:e filename

两个文件之间的切换方便的可以使用；e #

#对：e特别有用。%代表当前的文件名，#代表替补的文件名

在当前文件尚未保存前,vi不会让你用：ｅ和：ｎ来切换文件的，除非你特别命令之后加上感叹号





在ｖｉ中切换文件

ｃｔｒｌ　＾是切换文件的常用功能













全局替换

全局替换实际上用到2个命令：ｇ（ｇｌｏｂａｌ全局）和：ｓ（ｓｕｂｓｔｉｔｕｔｅ替换）

:s/new/old

他会将当前这一行中第一个出现的new该成old

:s/old/new/g  他会将当前这一行的old更换成new，并不是之换第一个

通过在：s命令前加上地址前缀，可以把它的范围扩展到多行。例如下面命令把50行到100行的old的每次出现都改为new：
：50, 100 s / old / new / g

下面的命令把整个文件中的old的每次出现都改为new：
：1, $s / old / new / g
我们知道%等价于1，$，所以上行命令也可以这样写：
：% s / old / new / g

